{"version":3,"sources":["components/UserInputs.tsx","components/StreamInputs.tsx","components/StreamPoints.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["subscriptions","value","label","streaks","UserInputs","subscription","setSubscription","streak","setStreak","activeness","setActiveness","Container","Typography","variant","Box","FormControl","component","fullWidth","FormLabel","RadioGroup","row","onChange","e","target","map","FormControlLabel","control","Radio","color","labelPlacement","Slider","min","max","step","_","v","valueLabelDisplay","valueLabelFormat","Math","round","StreamInputs","time","raid","setTime","setRaid","Grid","container","justify","item","TextField","size","type","inputProps","Checkbox","checked","c","StreamPoints","multiplier","subscriptionMultiplier","streakPoints","calculateStreakPoints","watchPoints","floor","activePoints","raidPoints","totalPoints","Table","TableRow","TableCell","App","useState","AppBar","position","Toolbar","maxWidth","spacing","Paper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createMuiTheme","palette","primary","main","secondary","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.045ac39c.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Box,\n  Container,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  Radio,\n  RadioGroup,\n  Slider,\n  Typography,\n} from \"@material-ui/core\";\n\ninterface IUserInputsProps {\n  subscription: string;\n  setSubscription: React.Dispatch<React.SetStateAction<string>>;\n  streak: string;\n  setStreak: React.Dispatch<React.SetStateAction<string>>;\n  activeness: number;\n  setActiveness: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst subscriptions = [\n  { value: \"0\", label: \"None\" },\n  { value: \"1\", label: \"Tier 1 / Prime\" },\n  { value: \"2\", label: \"Tier 2\" },\n  { value: \"3\", label: \"Tier 3\" },\n];\nconst streaks = [\n  { value: \"never\", label: \"Never\" },\n  { value: \"1\", label: \"1\" },\n  { value: \"2\", label: \"2\" },\n  { value: \"3\", label: \"3\" },\n  { value: \"4\", label: \"4\" },\n  { value: \"5\", label: \"5+\" },\n];\n\nfunction UserInputs({\n  subscription,\n  setSubscription,\n  streak,\n  setStreak,\n  activeness,\n  setActiveness,\n}: IUserInputsProps) {\n  return (\n    <Container>\n      <Typography variant=\"overline\">User Details</Typography>\n      <Box>\n        <FormControl component=\"fieldset\" fullWidth>\n          <FormLabel component=\"legend\">Subscription</FormLabel>\n          <RadioGroup\n            row\n            value={subscription}\n            onChange={(e) => setSubscription(e.target.value)}\n          >\n            {subscriptions.map(({ value, label }) => (\n              <FormControlLabel\n                key={value}\n                value={value}\n                control={<Radio color=\"primary\" />}\n                labelPlacement=\"bottom\"\n                label={label}\n              />\n            ))}\n          </RadioGroup>\n        </FormControl>\n      </Box>\n      <Box>\n        <FormControl component=\"fieldset\" fullWidth>\n          <FormLabel component=\"legend\">Watch Streak</FormLabel>\n          <RadioGroup\n            row\n            value={streak}\n            onChange={(e) => setStreak(e.target.value)}\n          >\n            {streaks.map(({ value, label }) => (\n              <FormControlLabel\n                key={value}\n                value={value}\n                control={<Radio color=\"primary\" />}\n                labelPlacement=\"bottom\"\n                label={label}\n              />\n            ))}\n          </RadioGroup>\n        </FormControl>\n      </Box>\n      <Box>\n        <FormControl component=\"fieldset\" fullWidth>\n          <FormLabel component=\"legend\">Active Watching</FormLabel>\n          <Slider\n            min={0}\n            max={1}\n            step={0.01}\n            value={activeness}\n            onChange={(_, v) => setActiveness(v as number)}\n            valueLabelDisplay=\"auto\"\n            valueLabelFormat={(value) => `${Math.round(value * 100)}%`}\n          />\n        </FormControl>\n      </Box>\n    </Container>\n  );\n}\n\nexport default UserInputs;\n","import React from \"react\";\nimport {\n  Checkbox,\n  Container,\n  FormControlLabel,\n  Grid,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\n\ninterface IStreamInputsProps {\n  time: number;\n  raid: boolean;\n  setTime: React.Dispatch<React.SetStateAction<number>>;\n  setRaid: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nfunction StreamInputs({ time, raid, setTime, setRaid }: IStreamInputsProps) {\n  return (\n    <Container>\n      <Typography variant=\"overline\">Stream Details</Typography>\n      <Grid container justify=\"space-between\">\n        <Grid item>\n          <TextField\n            label=\"Duration\"\n            variant=\"outlined\"\n            size=\"small\"\n            type=\"number\"\n            inputProps={{ min: 0 }}\n            value={time}\n            onChange={(e) => setTime((e.target.value as unknown) as number)}\n          />\n        </Grid>\n        <Grid item>\n          <FormControlLabel\n            control={\n              <Checkbox\n                color=\"primary\"\n                checked={raid}\n                onChange={(_, c) => setRaid(c)}\n              />\n            }\n            label=\"Raid\"\n          />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default StreamInputs;\n","import React from \"react\";\nimport {\n  Box,\n  Container,\n  Divider,\n  List,\n  ListItem,\n  ListItemText,\n  Table,\n  TableCell,\n  TableRow,\n  Typography,\n} from \"@material-ui/core\";\n\ninterface IStreamPointsProps {\n  subscription: string;\n  streak: string;\n  activeness: number;\n  time: number;\n  raid: boolean;\n}\n\nfunction calculateStreakPoints(streak: string) {\n  if (streak === \"2\") {\n    return 300;\n  }\n  if (streak === \"3\") {\n    return 350;\n  }\n  if (streak === \"4\") {\n    return 400;\n  }\n  if (streak === \"5\") {\n    return 450;\n  }\n  return 0;\n}\n\nfunction subscriptionMultiplier(subscription: string) {\n  if (subscription === \"1\") {\n    return 1.2;\n  }\n  if (subscription === \"2\") {\n    return 1.4;\n  }\n  if (subscription === \"3\") {\n    return 2;\n  }\n  return 1;\n}\n\nfunction StreamPoints({\n  subscription,\n  streak,\n  activeness,\n  time,\n  raid,\n}: IStreamPointsProps) {\n  const multiplier = subscriptionMultiplier(subscription);\n  const streakPoints = calculateStreakPoints(streak);\n  const watchPoints = Math.round(multiplier * Math.floor(time / 5) * 10);\n  const activePoints = Math.round(\n    multiplier * Math.floor(activeness * Math.floor(time / 15)) * 50\n  );\n  const raidPoints = raid ? 250 : 0;\n\n  const totalPoints = streakPoints + watchPoints + activePoints + raidPoints;\n\n  return (\n    <Container>\n      <Typography variant=\"overline\">Points Earned</Typography>\n      <Table>\n        {streakPoints > 0 && (\n          <TableRow>\n            <TableCell>Points from Watch Streak:</TableCell>\n            <TableCell>\n              <Typography color=\"primary\">{streakPoints}</Typography>\n            </TableCell>\n          </TableRow>\n        )}\n        {watchPoints > 0 && (\n          <TableRow>\n            <TableCell>Points from Watching:</TableCell>\n            <TableCell>\n              <Typography color=\"primary\">{watchPoints}</Typography>\n            </TableCell>\n          </TableRow>\n        )}\n        {activePoints > 0 && (\n          <TableRow>\n            <TableCell>Points from Active:</TableCell>\n            <TableCell>\n              <Typography color=\"primary\">{activePoints}</Typography>\n            </TableCell>\n          </TableRow>\n        )}\n        {raidPoints > 0 && (\n          <TableRow>\n            <TableCell>Points from Raid:</TableCell>\n            <TableCell>\n              <Typography color=\"primary\">{raidPoints}</Typography>\n            </TableCell>\n          </TableRow>\n        )}\n        <TableRow />\n        <TableRow>\n          <TableCell>Total Points:</TableCell>\n          <TableCell>\n            <Typography color=\"primary\">\n              <strong>{totalPoints}</strong>\n            </Typography>\n          </TableCell>\n        </TableRow>\n      </Table>\n    </Container>\n  );\n}\n\nexport default StreamPoints;\n","import React, { useState } from \"react\";\nimport {\n  AppBar,\n  Container,\n  Grid,\n  Paper,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport UserInputs from \"./components/UserInputs\";\nimport StreamInputs from \"./components/StreamInputs\";\nimport StreamPoints from \"./components/StreamPoints\";\n\nfunction App() {\n  const [subscription, setSubscription] = useState(\"0\");\n  const [streak, setStreak] = useState(\"never\");\n  const [activeness, setActiveness] = useState(0.3);\n  const [time, setTime] = useState(1 * 60);\n  const [raid, setRaid] = useState(false);\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\">Twitch Channel Points Calculator</Typography>\n        </Toolbar>\n      </AppBar>\n      <Toolbar />\n      <Container maxWidth={false}>\n        <Grid container spacing={2}>\n          <Grid item>\n            <Paper>\n              <UserInputs\n                subscription={subscription}\n                setSubscription={setSubscription}\n                streak={streak}\n                setStreak={setStreak}\n                activeness={activeness}\n                setActiveness={setActiveness}\n              />\n\n              <StreamInputs\n                time={time}\n                raid={raid}\n                setTime={setTime}\n                setRaid={setRaid}\n              />\n            </Paper>\n          </Grid>\n          <Grid item>\n            <Paper>\n              <StreamPoints\n                subscription={subscription}\n                streak={streak}\n                activeness={activeness}\n                time={time}\n                raid={raid}\n              />\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: \"#9146ff\" },\n    secondary: { main: \"#ff9146\" },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}